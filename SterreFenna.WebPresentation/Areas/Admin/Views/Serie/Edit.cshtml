@model EditSerieModel

<h2>Serie: @Model.SerieDetails.Name</h2>

<form class="form" id="addGalleryForm" enctype="multipart/form-data">
    <div class="row">
        <h2>Serie bewerken</h2>
        <div class="form-group col-sm-4">
            <label for="name">Naam</label>
            <input type="text" class="form-control" id="name" value="@Model.SerieDetails.Name" placeholder="Naam van nieuwe serie">
        </div>
        <div class="form-group col-sm-4">
            <label for="publicationDate">Publicatiedatum</label>
            <input type="text" class="form-control" id="publicationDate" name="publicationDate" value="@Model.SerieDetails.Published" placeholder="Datum van publicatie">
        </div>
        <div class="col-sm-4">
            <button type="button"
                    class="btn btn-primary pull-right"
                    style="margin-top: 24px;"
                    onclick="submitAddSerie()">
                Bijwerken
            </button>
        </div>
    </div>
    <div class="row">
        <h2>Project</h2>
        <div class="form-group col-sm-4">
            <label for="newProjectName">Naam</label>
            <input type="text" class="form-control" id="newProjectName" value="@Model.SerieDetails.ProjectName" placeholder="Naam van nieuw project">
        </div>
        <div class="form-group col-sm-4">
            <label for="publicationDate">Onderbrengen aan bestaand project</label>
            <select class="form-control" id="projectId" name="projectId">
                <option>Niet onderbrengen aan bestaand project</option>
                @foreach (var item in Model.Projects)
                {
                    var selected = item.Id == Model.SerieDetails.Id ? "selected" : "";
                    <option value="@item.Id" @selected>@item.Name</option>
                }
            </select>
        </div>
    </div>
</form>
<div class="photo-container">
    <h3>Foto's</h3>
    <div class="dropzone-container">
        <form action="/Admin/Serie/SubmitEdit"
              method="post"
              class="dropzone"
              id="foo-bar">
            <div class="dz-message" data-dz-message><span>Klik of sleep hier om foto's toe te voegen</span></div>
        </form>
    </div>
    <div class="uploaded-pics-container clearfix">
        <ul id="sortable">
            @foreach (var item in Model.SerieDetails.SerieItems.OrderBy(s => s.Rank))
            {
                <li class="ui-state-default height-90">
                    <img src="@item.Location" alt="@item.Location" title="@item.Location" />
                    <i class="fa fa-trash" onclick="removePhotoFromList(this)"></i>
                    <i class="fa fa-asterisk" onclick="markAsFavourite(this)"></i>
                </li>
            }
        </ul>
    </div>
</div>
@section scripts{
    <script>
        var _favouriteItems = [];

        $(function () {
            $("#sortable").sortable();
            $("#sortable").disableSelection();
        });

        var _initialize = true;
        var dropzoneOptions = {
            autoProcessQueue: false,
            uploadMultiple: true,
            addRemoveLinks: false,
            previewTemplate: '<div style="display:none"></div>',
            paramName: 'files',
            parallelUploads: 100,
            init: function () {
                this.on("sending", function (file, xhr, formData) {
                    formData.append('serieId', @Model.SerieDetails.Id);
                    formData.append('name', getFieldValue("name"));
                    formData.append('publicationDate', getFieldValue("publicationDate"));
                    formData.append('filenameOrder', getOrderOfFilenames());
                    formData.append('favouriteFilenames', _favouriteItems);
                    formData.append('newProjectName', getFieldValue("newProjectName"));
                    formData.append('projectId', getFieldValue("projectId"));
                });

                this.on("addedfile", function (file) {
                    if(_initialize) return;
                    addFileToSortablePics(file);
                });

                var myDropzone = this;
                var images =  $("#sortable img").map(function(){
                    var location = $(this).attr('src');

                    var mockFile = { 
                        name: "myimage.jpg", 
                        size: 12345, 
                        type: 'image/jpeg', 
                        status: Dropzone.QUEUED, 
                        url: location
                    };

                    // Call the default addedfile event handler
                    myDropzone.emit("addedfile", mockFile);

                    myDropzone.files.push(mockFile);
                });

                _initialize = false;   
            }
        };
        Dropzone.autoDiscover = true;
        Dropzone.options.fooBar = dropzoneOptions;

        function addFileToSortablePics(file) {

            getBase64String(file, function (imageString) {
                var container = $("#sortable");
                var image = '<img src="' + imageString + '" alt="' + file.name + '" title="' + file.name + '"/>';
                var trash = '<i class="fa fa-trash" onclick="removePhotoFromList(this)"></i>';
                var favourite = '<i class="fa fa-asterisk" onclick="markAsFavourite(this)"></i>';
                var item = '<li class="ui-state-default height-90">' + image + trash + favourite + '</li>';

                container.append(item);
            });
        }

        function submitAddSerie() {
            var dropzone = Dropzone.instances[0];
                dropzone.processQueue();
        }

        function getFieldValue(name) {
            return $("#" + name).val();
        }

        function getBase64String(file, callback) {
            var reader = new FileReader();

            // Closure to capture the file information.
            reader.onload = function (e) {
                //get the base64 url
                var base64URL = e.target.result;

                if (callback != null)
                    callback(base64URL);
            };

            // Read in the image file as a data URL.
            reader.readAsDataURL(file);
        }

        function removePhotoFromList(element) {
            $(element).parent().remove();
        }

        function getOrderOfFilenames() {
            var imageNames = [];
            var images = $("#sortable li img");

            $.each(images, function (index, image) {
                imageNames.push($(image).prop('alt'));
            });

            return imageNames;
        }

        function markAsFavourite(element){
            var src = $(element).parent().find('img').attr('src');
            var index = _favouriteItems.indexOf(src);

            if(index > -1){
                _favouriteItems.splice(index, 1);

                $(element).removeClass('favourite-item');
            }
            else{
                _favouriteItems.push(src);

                $(element).addClass('favourite-item');
            }
        }
    </script>
}